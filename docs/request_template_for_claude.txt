
# TwoMiceVD 実装依頼テンプレート

下記の仕様書 (`spec_ja.md`) とコードスケルトン (`two_mice_vd_skeleton.cs`) を基に、Windows 11 用の C# アプリケーション **TwoMiceVD** を完成させてください。重要な要求事項は以下のとおりです。

## 要求事項
1. **RawInputManager**
   - Raw Input API を用いて 2 台のマウスを個別に識別し、それぞれの移動量を監視します。
   - 隠しフォームを用いて `WM_INPUT` メッセージを受け取り、`RAWINPUT` 構造体からデバイスハンドルや移動量 (`lLastX`,`lLastY`) を読み取り、デバイスごとの識別子に変換します。
   - 移動量を取得したら `DeviceMovedEventArgs` を発火し、ハンドラーにデバイスIDと ΔX・ΔY を渡します。

2. **VirtualDesktopController**
   - 方式Aとして Windows の Virtual Desktop COM API を使用し、仮想デスクトップの列挙・作成・切替を実装してください。
     - `IVirtualDesktop`, `IVirtualDesktopManager`（公開インターフェイス）、`IVirtualDesktopManagerInternal` 等の必要なインターフェイスを `ComImport` 属性で宣言し、デスクトップのGUIDを取得・保存できるようにします。
     - 起動時に仮想デスクトップの枚数をチェックし、必要に応じて追加します。
   - COM API 呼び出しが失敗する場合に備えて、方式Bとして `SendInput` を用いて `Win+Ctrl+→/←` のショートカットキーを送出し、必要な回数だけデスクトップを移動させて目標インデックスに到達する処理を追加します。
   - フォールバックが発動した際はログに記録し、ユーザーに通知する設計としてください。

3. **SwitchPolicy**
   - `threshold_movement` と `hysteresis_ms` を考慮して、移動イベントに基づく切替制御を実装してください。
   - デバイスごとの累積移動量がしきい値を超え、かつ前回切替からヒステリシス時間が経過している場合にのみ仮想デスクトップの切替を行います。
   - 最大切替回数／秒 (`max_switch_per_sec`) も考慮し、無限ループを防ぎます。

4. **TrayUI**
   - System.Windows.Forms または WPF を使って NotifyIcon を実装し、コンテキストメニューに以下の項目を追加します。
     - ペアリング開始: ユーザーがマウスA/Bを再設定できるダイアログを表示。
     - 割当反転: マウスA ↔ マウスB の割り当てを逆にする。
     - 感度設定: `threshold_movement` を1〜20の範囲で調整できる UI を提供。
     - クールダウン設定: `hysteresis_ms` を200〜1000msで調整できる UI を提供。
     - 起動時に自動開始: HKCU\Software\Microsoft\Windows\CurrentVersion\Run にアプリのパスを登録・削除するチェックボックス。
     - ログ表示: 最近の切替やエラーメッセージを閲覧するウィンドウを開く。
     - 終了: アプリケーションを終了する。

5. **ConfigStore**
   - JSON 形式で設定を `"%LOCALAPPDATA%\TwoMiceVD\config.json"` に保存・読み込みできるよう実装してください。
   - マウスの識別子 (デバイスパス、VID/PID) と仮想デスクトップの GUID／インデックスのマッピングを保持します。
   - しきい値やヒステリシス、優先する API のフラグなども保存し、ユーザーが変更できるようにします。

6. **全体の統合**
   - アプリケーションはタスクトレイに常駐し、RawInputManager からのイベントを受けて SwitchPolicy を経由して VirtualDesktopController へ切替要求を伝達します。
   - 例外やエラーはログに記録し、必要に応じて UI でユーザーに通知します。

## 補足
- 切替トリガは **移動のみ** とします。クリックやスクロールでは切替を行いません。
- 仮想デスクトップの名称や壁紙のカスタマイズは不要です。
- コードスケルトンに含まれる TODO 箇所を埋め、ビルドできる完全なプロジェクトとしてください。
- COM API の GUID やメソッドシグネチャは最新の Windows 11 に基づいて実装し、将来の互換性が損なわれる可能性を考慮してフォールバックを用意してください。

このテンプレートに沿って実装することで、TwoMiceVD の仕様を満たす C# アプリケーションを生成できます。必要に応じて追加の補助クラスやヘルパーメソッドを作成して構いません。
